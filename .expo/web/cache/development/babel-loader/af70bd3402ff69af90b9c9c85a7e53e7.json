{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"C:\\\\projet_annuel_react_native\\\\ll\\\\rcnt\\\\screens\\\\BarChart.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { PureComponent } from 'react';\nimport { Svg, G, Line, Rect, Text } from 'react-native-svg';\nimport * as d3 from 'd3';\nvar GRAPH_MARGIN = 20;\nvar GRAPH_BAR_WIDTH = 5;\nvar colors = {\n  axis: '#E4E4E4',\n  bars: '#15AD13'\n};\n\nvar BarChart = function (_PureComponent) {\n  _inherits(BarChart, _PureComponent);\n\n  var _super = _createSuper(BarChart);\n\n  function BarChart() {\n    _classCallCheck(this, BarChart);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(BarChart, [{\n    key: \"render\",\n    value: function render() {\n      var SVGHeight = 150;\n      var SVGWidth = 300;\n      var graphHeight = SVGHeight - 2 * GRAPH_MARGIN;\n      var graphWidth = SVGWidth - 2 * GRAPH_MARGIN;\n      var data = this.props.data;\n      var xDomain = data.map(function (item) {\n        return item.label;\n      });\n      var xRange = [0, graphWidth];\n      var x = d3.scalePoint().domain(xDomain).range(xRange).padding(1);\n      var maxValue = d3.max(data, function (d) {\n        return d.value;\n      });\n      var topValue = Math.ceil(maxValue / this.props.round) * this.props.round;\n      var yDomain = [0, topValue];\n      var yRange = [0, graphHeight];\n      var y = d3.scaleLinear().domain(yDomain).range(yRange);\n      var middleValue = topValue / 2;\n      return React.createElement(Svg, {\n        width: SVGWidth,\n        height: SVGHeight,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 7\n        }\n      }, React.createElement(G, {\n        y: graphHeight + GRAPH_MARGIN,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 9\n        }\n      }, React.createElement(Text, {\n        x: graphWidth,\n        textAnchor: \"end\",\n        y: y(topValue) * -1 - 5,\n        fontSize: 12,\n        fill: \"black\",\n        fillOpacity: 0.4,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 11\n        }\n      }, topValue + ' ' + this.props.unit), React.createElement(Line, {\n        x1: \"0\",\n        y1: y(topValue) * -1,\n        x2: graphWidth,\n        y2: y(topValue) * -1,\n        stroke: colors.axis,\n        strokeDasharray: [3, 3],\n        strokeWidth: \"0.5\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 11\n        }\n      }), React.createElement(Line, {\n        x1: \"0\",\n        y1: y(middleValue) * -1,\n        x2: graphWidth,\n        y2: y(middleValue) * -1,\n        stroke: colors.axis,\n        strokeDasharray: [3, 3],\n        strokeWidth: \"0.5\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 11\n        }\n      }), React.createElement(Line, {\n        x1: \"0\",\n        y1: \"2\",\n        x2: graphWidth,\n        y2: \"2\",\n        stroke: colors.axis,\n        strokeWidth: \"0.5\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 11\n        }\n      }), data.map(function (item) {\n        return React.createElement(Rect, {\n          key: 'bar' + item.label,\n          x: x(item.label) - GRAPH_BAR_WIDTH / 2,\n          y: y(item.value) * -1,\n          rx: 2.5,\n          width: GRAPH_BAR_WIDTH,\n          height: y(item.value),\n          fill: colors.bars,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 13\n          }\n        });\n      }), data.map(function (item) {\n        return React.createElement(Text, {\n          key: 'label' + item.label,\n          fontSize: \"8\",\n          x: x(item.label),\n          y: \"10\",\n          textAnchor: \"middle\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 13\n          }\n        }, item.label);\n      })));\n    }\n  }]);\n\n  return BarChart;\n}(PureComponent);\n\nexport { BarChart as default };","map":{"version":3,"sources":["C:/projet_annuel_react_native/ll/rcnt/screens/BarChart.js"],"names":["React","PureComponent","Svg","G","Line","Rect","Text","d3","GRAPH_MARGIN","GRAPH_BAR_WIDTH","colors","axis","bars","BarChart","SVGHeight","SVGWidth","graphHeight","graphWidth","data","props","xDomain","map","item","label","xRange","x","scalePoint","domain","range","padding","maxValue","max","d","value","topValue","Math","ceil","round","yDomain","yRange","y","scaleLinear","middleValue","unit"],"mappings":"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","sourcesContent":["import React, { PureComponent } from 'react'\r\nimport { Svg, G, Line, Rect, Text } from 'react-native-svg'\r\nimport * as d3 from 'd3'\r\n\r\nconst GRAPH_MARGIN = 20\r\nconst GRAPH_BAR_WIDTH = 5\r\nconst colors = {\r\n  axis: '#E4E4E4',\r\n  bars: '#15AD13'\r\n}\r\n\r\nexport default class BarChart extends PureComponent {\r\n  render() {\r\n    // Dimensions\r\n    const SVGHeight = 150\r\n    const SVGWidth = 300\r\n    const graphHeight = SVGHeight - 2 * GRAPH_MARGIN\r\n    const graphWidth = SVGWidth - 2 * GRAPH_MARGIN\r\n    const data = this.props.data\r\n\r\n    // X scale point\r\n    const xDomain = data.map(item => item.label)\r\n    const xRange = [0, graphWidth]\r\n    const x = d3.scalePoint()\r\n      .domain(xDomain)\r\n      .range(xRange)\r\n      .padding(1)\r\n\r\n    // Y scale linear\r\n    const maxValue = d3.max(data, d => d.value)\r\n    const topValue = Math.ceil(maxValue / this.props.round) * this.props.round\r\n    const yDomain = [0, topValue]\r\n    const yRange = [0, graphHeight]\r\n    const y = d3.scaleLinear()\r\n      .domain(yDomain)\r\n      .range(yRange)\r\n\r\n    // top axis and middle axis\r\n    const middleValue = topValue / 2\r\n\r\n    return (\r\n      <Svg width={SVGWidth} height={SVGHeight}>\r\n        <G y={graphHeight + GRAPH_MARGIN}>\r\n          {/* Top value label */}\r\n          <Text\r\n              x={graphWidth}\r\n              textAnchor=\"end\"\r\n              y={y(topValue) * -1 - 5}\r\n              fontSize={12}\r\n              fill=\"black\"\r\n              fillOpacity={0.4}>\r\n              {topValue + ' ' + this.props.unit}\r\n            </Text>\r\n\r\n          {/* top axis */}\r\n          <Line\r\n            x1=\"0\"\r\n            y1={y(topValue) * -1}\r\n            x2={graphWidth}\r\n            y2={y(topValue) * -1}\r\n            stroke={colors.axis}\r\n            strokeDasharray={[3, 3]}\r\n            strokeWidth=\"0.5\"\r\n          />\r\n\r\n          {/* middle axis */}\r\n          <Line\r\n            x1=\"0\"\r\n            y1={y(middleValue) * -1}\r\n            x2={graphWidth}\r\n            y2={y(middleValue) * -1}\r\n            stroke={colors.axis}\r\n            strokeDasharray={[3, 3]}\r\n            strokeWidth=\"0.5\"\r\n          />\r\n\r\n          {/* bottom axis */}\r\n          <Line\r\n            x1=\"0\"\r\n            y1=\"2\"\r\n            x2={graphWidth}\r\n            y2=\"2\"\r\n            stroke={colors.axis}\r\n            strokeWidth=\"0.5\"\r\n          />\r\n\r\n           {/* bars */}\r\n           {data.map(item => (\r\n            <Rect\r\n              key={'bar' + item.label}\r\n              x={x(item.label) - (GRAPH_BAR_WIDTH / 2)}\r\n              y={y(item.value) * -1}\r\n              rx={2.5}\r\n              width={GRAPH_BAR_WIDTH}\r\n              height={y(item.value)}\r\n              fill={colors.bars}\r\n            />\r\n          ))}\r\n\r\n          {/* labels */}\r\n          {data.map(item => (\r\n            <Text\r\n            key={'label' + item.label}\r\n            fontSize=\"8\"\r\n            x={x(item.label)}\r\n            y=\"10\"\r\n            textAnchor=\"middle\">{item.label}</Text>\r\n          ))}\r\n        </G>\r\n      </Svg>\r\n    )\r\n  }\r\n}"]},"metadata":{},"sourceType":"module"}